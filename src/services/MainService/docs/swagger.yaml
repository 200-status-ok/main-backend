basePath: /api/v1
definitions:
  Api.MessageBody:
    properties:
      content:
        type: string
      conversation_id:
        type: integer
      id:
        type: integer
      poster_id:
        type: integer
      type:
        type: string
    required:
    - content
    - conversation_id
    - id
    - poster_id
    - type
    type: object
  Api.MessageIDsBody:
    properties:
      message_ids:
        items:
          type: integer
        type: array
      sender_id:
        type: integer
    required:
    - message_ids
    - sender_id
    type: object
  Api.UpdateConversationBody:
    properties:
      image:
        type: string
      name:
        type: string
    type: object
  Model.Conversation:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      image_url:
        type: string
      member_id:
        type: integer
      messages:
        items:
          $ref: '#/definitions/Model.Message'
        type: array
      name:
        type: string
      owner_id:
        type: integer
      poster_id:
        type: integer
      updated_at:
        type: string
    type: object
  Model.Message:
    properties:
      content:
        type: string
      conversation_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      is_send:
        type: boolean
      receiver_id:
        type: integer
      sender_id:
        type: integer
      status:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  UseCase.CreateMockDataRequest:
    properties:
      count:
        type: integer
      tag_names:
        items:
          type: string
        type: array
      user_id:
        type: integer
    required:
    - count
    - tag_names
    - user_id
    type: object
  UseCase.CreatePosterRequest:
    properties:
      addresses:
        items:
          $ref: '#/definitions/dtos.CreateAddressDTO'
        type: array
      img_urls:
        items:
          type: string
        type: array
      poster:
        $ref: '#/definitions/dtos.CreatePosterDTO'
      tags:
        items:
          type: string
        type: array
    required:
    - img_urls
    - tags
    type: object
  UseCase.CreateTagRequest:
    properties:
      name:
        maxLength: 30
        minLength: 1
        type: string
    required:
    - name
    type: object
  UseCase.CreateUserRequest:
    properties:
      username:
        maxLength: 30
        minLength: 11
        type: string
    required:
    - username
    type: object
  UseCase.LoginAdminRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  UseCase.SendOTPRequest:
    properties:
      username:
        maxLength: 30
        minLength: 11
        type: string
    required:
    - username
    type: object
  UseCase.SignupAdminRequest:
    properties:
      email:
        maxLength: 30
        minLength: 8
        type: string
      f_name:
        maxLength: 30
        minLength: 4
        type: string
      l_name:
        maxLength: 30
        minLength: 4
        type: string
      password:
        type: string
      phone:
        maxLength: 30
        minLength: 11
        type: string
      username:
        maxLength: 30
        minLength: 5
        type: string
    required:
    - email
    - f_name
    - l_name
    - password
    - phone
    - username
    type: object
  UseCase.UpdatePosterReportRequest:
    properties:
      description:
        type: string
      issuer_id:
        type: integer
      poster_id:
        type: integer
      report_type:
        type: string
      status:
        type: string
    type: object
  UseCase.UpdatePosterRequest:
    properties:
      addresses:
        items:
          $ref: '#/definitions/dtos.UpdateAddressDTO'
        type: array
      poster:
        $ref: '#/definitions/dtos.UpdatePosterDTO'
    type: object
  UseCase.UpdateTagRequest:
    properties:
      name:
        maxLength: 30
        type: string
      state:
        enum:
        - accepted
        - rejected
        - pending
        - ""
        type: string
    type: object
  UseCase.UpdateUserRequest:
    properties:
      username:
        maxLength: 50
        minLength: 11
        type: string
    required:
    - username
    type: object
  UseCase.UserInfo:
    properties:
      username:
        maxLength: 30
        minLength: 5
        type: string
    required:
    - username
    type: object
  UseCase.VerifyOTPRequest:
    properties:
      otp:
        type: string
      username:
        maxLength: 30
        minLength: 11
        type: string
    required:
    - otp
    - username
    type: object
  View.AddressView:
    properties:
      address_detail:
        type: string
      city:
        type: string
      created_at:
        type: integer
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      poster_id:
        type: integer
      province:
        type: string
      updated_at:
        type: integer
    type: object
  View.AdminLoginView:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  View.AdminView:
    properties:
      email:
        type: string
      f_name:
        type: string
      l_name:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  View.AllPostersView:
    properties:
      max_page:
        type: integer
      posters:
        items:
          $ref: '#/definitions/dtos.ESPosterDTO'
        type: array
      total:
        type: integer
    type: object
  View.ChatMessageView:
    properties:
      content:
        type: string
      conversation_id:
        type: integer
      created_at:
        type: integer
      id:
        type: integer
      receiver_id:
        type: integer
      sender_id:
        type: integer
      status:
        type: string
      type:
        type: string
      updated_at:
        type: integer
    type: object
  View.ConversationView:
    properties:
      id:
        type: integer
      image_url:
        type: string
      is_owner:
        type: boolean
      last_message:
        $ref: '#/definitions/View.ChatMessageView'
      name:
        type: string
      poster_id:
        type: integer
    type: object
  View.GeneratedPosterInfoView:
    properties:
      colors:
        items:
          type: string
        type: array
      description:
        type: string
      tags:
        items:
          type: string
        type: array
      titles:
        items:
          type: string
        type: array
    type: object
  View.ImageView:
    properties:
      created_at:
        type: integer
      id:
        type: integer
      updated_at:
        type: integer
      url:
        type: string
    type: object
  View.MarkedPosterView:
    properties:
      created_at:
        type: integer
      id:
        type: integer
      poster:
        $ref: '#/definitions/View.PosterView'
      poster_id:
        type: integer
      updated_at:
        type: integer
      user_id:
        type: integer
    type: object
  View.MessageView:
    properties:
      message:
        type: string
    type: object
  View.PosterReportView:
    properties:
      description:
        type: string
      id:
        type: integer
      issuer:
        $ref: '#/definitions/View.UserViewInfo'
      poster:
        $ref: '#/definitions/View.PosterView'
      report_type:
        type: string
      status:
        type: string
    type: object
  View.PosterView:
    properties:
      addresses:
        items:
          $ref: '#/definitions/View.AddressView'
        type: array
      award:
        type: number
      created_at:
        type: integer
      description:
        type: string
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/View.ImageView'
        type: array
      special_type:
        type: string
      state:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/View.TagView'
        type: array
      telegram_id:
        type: string
      title:
        type: string
      updated_at:
        type: integer
      user_id:
        type: integer
      user_phone:
        type: string
    type: object
  View.TagView:
    properties:
      created_at:
        type: integer
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: integer
    type: object
  View.UserView:
    properties:
      id:
        type: integer
      message:
        type: string
      token:
        type: string
    type: object
  View.UserViewInfo:
    properties:
      id:
        type: integer
      marked_posters:
        items:
          $ref: '#/definitions/View.MarkedPosterView'
        type: array
      posters:
        items:
          $ref: '#/definitions/View.PosterView'
        type: array
      username:
        type: string
      wallet:
        type: number
    type: object
  View.UserViewPayment:
    properties:
      amount:
        type: number
      created_at:
        type: integer
      id:
        type: integer
      status:
        type: string
      user_id:
        type: integer
    type: object
  dtos.CreateAddressDTO:
    properties:
      address_detail:
        maxLength: 1000
        minLength: 5
        type: string
      city:
        maxLength: 255
        minLength: 5
        type: string
      latitude:
        type: number
      longitude:
        type: number
      province:
        maxLength: 255
        minLength: 5
        type: string
    required:
    - city
    - latitude
    - longitude
    - province
    type: object
  dtos.CreatePosterDTO:
    properties:
      alert:
        type: boolean
      award:
        type: number
      chat:
        type: boolean
      description:
        maxLength: 1000
        type: string
      special_type:
        enum:
        - normal
        - premium
        type: string
      status:
        enum:
        - lost
        - found
        type: string
      tel_id:
        maxLength: 255
        type: string
      title:
        maxLength: 255
        type: string
      user_phone:
        maxLength: 13
        type: string
    required:
    - alert
    - chat
    - status
    - title
    type: object
  dtos.ESAddressDTO:
    properties:
      address_detail:
        type: string
      city:
        type: string
      location:
        $ref: '#/definitions/dtos.Location'
      province:
        type: string
    type: object
  dtos.ESPosterDTO:
    properties:
      addresses:
        items:
          $ref: '#/definitions/dtos.ESAddressDTO'
        type: array
      alert:
        type: boolean
      award:
        type: number
      chat:
        type: boolean
      created_at:
        type: integer
      description:
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      special_type:
        enum:
        - normal
        - premium
        type: string
      state:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/dtos.ESTagDTO'
        type: array
      tel_id:
        maxLength: 255
        type: string
      title:
        type: string
      updated_at:
        type: integer
      user_id:
        minimum: 1
        type: integer
      user_phone:
        maxLength: 13
        minLength: 11
        type: string
    required:
    - alert
    - chat
    - user_id
    type: object
  dtos.ESTagDTO:
    properties:
      id:
        type: integer
      name:
        type: string
      state:
        enum:
        - accepted
        - rejected
        - pending
        type: string
    type: object
  dtos.Location:
    properties:
      lat:
        type: number
      lon:
        type: number
    type: object
  dtos.TransferMessage:
    properties:
      content:
        type: string
      conversation_id:
        type: integer
      type:
        type: string
    type: object
  dtos.UpdateAddressDTO:
    properties:
      address_detail:
        maxLength: 1000
        type: string
      city:
        maxLength: 255
        type: string
      latitude:
        type: number
      longitude:
        type: number
      province:
        maxLength: 255
        type: string
    type: object
  dtos.UpdatePosterDTO:
    properties:
      alert:
        enum:
        - "true"
        - "false"
        - ""
        type: string
      award:
        description: todo if you want to update reward to 0, set it to -1
        type: number
      chat:
        enum:
        - "true"
        - "false"
        - ""
        type: string
      description:
        maxLength: 1000
        type: string
      img_urls:
        items:
          type: string
        type: array
      special_ads:
        enum:
        - normal
        - premium
        - ""
        type: string
      state:
        enum:
        - pending
        - accepted
        - rejected
        - ""
        type: string
      status:
        enum:
        - lost
        - found
        - ""
        type: string
      tag_ids:
        items:
          type: integer
        type: array
      tel_id:
        maxLength: 255
        type: string
      title:
        maxLength: 255
        type: string
      user_id:
        type: integer
      user_phone:
        maxLength: 13
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  title: Swagger Documentation for Golang web API(Gin framework)
  version: "1.0"
paths:
  /admin/login:
    post:
      consumes:
      - application/json
      description: login admin
      parameters:
      - description: Login Admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/UseCase.LoginAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.AdminLoginView'
      summary: login admin
      tags:
      - admin
  /admin/poster:
    post:
      consumes:
      - application/json
      description: Creates a poster
      parameters:
      - description: Poster
        in: body
        name: poster
        required: true
        schema:
          $ref: '#/definitions/UseCase.CreatePosterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.PosterView'
      summary: Create a poster
      tags:
      - admin
  /admin/poster/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a poster by ID
      parameters:
      - description: Poster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a poster by ID
      tags:
      - admin
    patch:
      consumes:
      - application/json
      description: Updates a poster by ID
      parameters:
      - description: Poster ID
        in: path
        name: id
        required: true
        type: integer
      - description: Poster
        in: body
        name: poster
        required: true
        schema:
          $ref: '#/definitions/UseCase.UpdatePosterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.PosterView'
      summary: Update a poster by ID
      tags:
      - admin
  /admin/signup:
    post:
      consumes:
      - application/json
      description: signup admin
      parameters:
      - description: Signup Admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/UseCase.SignupAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.AdminView'
      summary: signup admin
      tags:
      - admin
  /admin/user:
    post:
      consumes:
      - application/json
      description: Create a User
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UseCase.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.UserViewInfo'
      summary: Create a User
      tags:
      - admin
  /admin/user/{userid}:
    delete:
      consumes:
      - application/json
      description: Deletes a User by ID
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a User by ID
      tags:
      - admin
    get:
      consumes:
      - application/json
      description: Retrieves a User by ID
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.UserViewInfo'
      summary: Get a User by ID
      tags:
      - admin
    patch:
      consumes:
      - application/json
      description: Updates a User by ID
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UseCase.UserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.UserViewInfo'
      summary: Update a User by ID
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieves Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/View.UserViewInfo'
            type: array
      summary: Get all Users
      tags:
      - admin
  /api-call/generate-poster-Info:
    get:
      consumes:
      - application/json
      description: Generates info for a poster
      parameters:
      - description: Image Url
        in: query
        name: image_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.GeneratedPosterInfoView'
      summary: Generate poster info
      tags:
      - ApiCall
  /api-call/image-upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload image
      parameters:
      - description: Multiple files
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Upload image
      tags:
      - ApiCall
  /chat/authorize/conversation:
    get:
      consumes:
      - application/json
      description: Get all user conversations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/View.ConversationView'
            type: array
      summary: Get all user conversations
      tags:
      - Chat
  /chat/authorize/conversation/{conversation_id}:
    get:
      consumes:
      - application/json
      description: Get conversation by id
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get conversation by id
      tags:
      - Chat
    patch:
      consumes:
      - application/json
      description: Update conversation
      parameters:
      - description: CreateConversation ID
        in: path
        name: conversation_id
        required: true
        type: integer
      - description: UpdateConversationBody
        in: body
        name: UpdateConversation
        required: true
        schema:
          $ref: '#/definitions/Api.UpdateConversationBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Update conversation
      tags:
      - Chat
  /chat/authorize/history/{conversation_id}/:
    get:
      consumes:
      - application/json
      description: Get conversation history
      parameters:
      - description: CreateConversation ID
        in: path
        name: conversation_id
        required: true
        type: integer
      - default: 1
        description: Page ID
        in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - default: 10
        description: Page size
        in: query
        minimum: 1
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Model.Conversation'
            type: array
      summary: Get conversation history
      tags:
      - Chat
  /chat/authorize/message:
    post:
      consumes:
      - application/json
      description: SendMessage to join a chat
      parameters:
      - description: Message
        in: body
        name: Message
        required: true
        schema:
          $ref: '#/definitions/Api.MessageBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: SendMessage
      tags:
      - Chat
  /chat/authorize/read:
    post:
      consumes:
      - application/json
      description: Read Multiple Messages
      parameters:
      - description: MessageIDs
        in: body
        name: MessageID
        required: true
        schema:
          $ref: '#/definitions/Api.MessageIDsBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Read Multiple Messages
      tags:
      - Chat
  /chat/open-ws:
    get:
      consumes:
      - application/json
      description: OpenWSConnection to join a chat
      parameters:
      - description: Message
        in: body
        name: Message
        required: true
        schema:
          $ref: '#/definitions/dtos.TransferMessage'
      - description: Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: OpenWSConnection
      tags:
      - Chat
  /posters:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all posters, sorted and paginated according
        to the given parameters
      parameters:
      - default: 1
        description: Page ID
        in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - default: 10
        description: Page size
        in: query
        minimum: 1
        name: page_size
        required: true
        type: integer
      - default: desc
        description: Sort direction
        in: query
        name: sort
        type: string
      - default: created_at
        description: Sort by
        in: query
        name: sort_by
        type: string
      - description: Search phrase
        in: query
        name: search_phrase
        type: string
      - default: both
        description: Status
        in: query
        name: status
        type: string
      - description: Time start
        in: query
        name: time_start
        type: integer
      - description: Time end
        in: query
        name: time_end
        type: integer
      - description: Only Awards
        in: query
        name: only_awards
        type: boolean
      - description: Latitude
        in: query
        name: lat
        type: number
      - description: Longitude
        in: query
        name: lon
        type: number
      - collectionFormat: multi
        description: TagIds
        in: query
        items:
          type: integer
        name: tag_ids
        type: array
      - default: all
        description: State
        in: query
        name: state
        type: string
      - default: all
        description: Special_type
        in: query
        name: special_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/View.AllPostersView'
            type: array
      summary: Get a list of all posters
      tags:
      - posters
  /posters/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a poster by ID
      parameters:
      - description: Poster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.PosterView'
      summary: Get a poster by ID
      tags:
      - posters
  /posters/authorize:
    post:
      consumes:
      - application/json
      description: Creates a poster
      parameters:
      - description: Poster
        in: body
        name: poster
        required: true
        schema:
          $ref: '#/definitions/UseCase.CreatePosterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.PosterView'
      summary: Create a poster
      tags:
      - posters
  /posters/authorize/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a poster by ID
      parameters:
      - description: Poster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a poster by ID
      tags:
      - posters
    patch:
      consumes:
      - application/json
      description: Updates a poster by ID
      parameters:
      - description: Poster ID
        in: path
        name: id
        required: true
        type: integer
      - description: Poster
        in: body
        name: poster
        required: true
        schema:
          $ref: '#/definitions/UseCase.UpdatePosterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.PosterView'
      summary: Update a poster by ID
      tags:
      - posters
  /posters/mock-data:
    post:
      consumes:
      - application/json
      description: Create mock data
      parameters:
      - description: Mock Data
        in: body
        name: mock
        required: true
        schema:
          $ref: '#/definitions/UseCase.CreateMockDataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create mock data
      tags:
      - posters
  /posters/state:
    patch:
      consumes:
      - application/json
      description: Updates a poster report by ID
      parameters:
      - description: ID
        in: query
        name: id
        required: true
        type: integer
      - default: accepted
        description: State
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Update a poster state by ID
      tags:
      - posters
  /reports:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all poster reports, sorted and paginated according
        to the given parameters
      parameters:
      - default: 1
        description: Page ID
        in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - default: 10
        description: Page size
        in: query
        minimum: 1
        name: page_size
        required: true
        type: integer
      - default: both
        description: Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/View.PosterReportView'
            type: array
      summary: Get a list of all poster reports
      tags:
      - reports
  /reports/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a poster report by ID
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.PosterReportView'
      summary: Get a poster report by ID
      tags:
      - reports
    patch:
      consumes:
      - application/json
      description: Updates a poster report by ID
      parameters:
      - description: Report ID
        in: path
        name: id
        required: true
        type: integer
      - description: Poster Report
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/UseCase.UpdatePosterReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.PosterView'
      summary: Update a poster report by ID
      tags:
      - reports
  /reports/report-poster:
    post:
      consumes:
      - application/json
      description: Reports a poster
      parameters:
      - description: Poster ID
        in: query
        name: poster_id
        required: true
        type: integer
      - description: Issuer ID
        in: query
        name: issuer_id
        required: true
        type: integer
      - default: other
        description: Report Type
        in: query
        name: report_type
        required: true
        type: string
      - description: Description
        in: query
        name: description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Report a poster
      tags:
      - reports
  /tags:
    get:
      consumes:
      - application/json
      description: Retrieves Tags
      parameters:
      - default: all
        description: State
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/View.TagView'
            type: array
      summary: Get all Tags
      tags:
      - Tags
    post:
      consumes:
      - application/json
      description: Creates a Tag by ID
      parameters:
      - description: Tag
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/UseCase.CreateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.TagView'
      summary: Create a Tag by ID
      tags:
      - Tags
  /tags/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a Tag by ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a Tag by ID
      tags:
      - Tags
    get:
      consumes:
      - application/json
      description: Retrieves a Tag by ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.TagView'
      summary: Get a Tag by ID
      tags:
      - Tags
    patch:
      consumes:
      - application/json
      description: Updates a Tag by ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      - description: Tag
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/UseCase.UpdateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.TagView'
      summary: Update a Tag by ID
      tags:
      - Tags
  /users/auth/google/callback:
    get:
      consumes:
      - application/json
      description: google callback
      produces:
      - application/json
      responses: {}
      summary: google callback
      tags:
      - users
  /users/auth/google/login:
    get:
      consumes:
      - application/json
      description: login user with oauth2
      produces:
      - application/json
      responses: {}
      summary: login user with oauth2
      tags:
      - users
  /users/auth/google/login/android:
    get:
      consumes:
      - application/json
      description: login user with Google
      parameters:
      - description: Email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: login user with Google
      tags:
      - users
  /users/auth/otp/login:
    post:
      consumes:
      - application/json
      description: login user
      parameters:
      - description: Verify OTP
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UseCase.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.UserView'
      summary: login user
      tags:
      - users
  /users/auth/otp/send:
    post:
      consumes:
      - application/json
      description: send otp to user
      parameters:
      - description: Send OTP
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UseCase.SendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.MessageView'
      summary: send otp to user
      tags:
      - users
  /users/authorize:
    get:
      consumes:
      - application/json
      description: Retrieves a User by Authorization Token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.UserViewInfo'
      summary: Get a User by Authorization Token
      tags:
      - users
  /users/authorize/:
    delete:
      consumes:
      - application/json
      description: Deletes a User by ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a User by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Updates a User by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UseCase.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.UserViewInfo'
      summary: Update a User by ID
      tags:
      - users
  /users/authorize/payment/user_wallet:
    get:
      consumes:
      - application/json
      description: Payment
      parameters:
      - description: URL
        in: query
        name: url
        required: true
        type: string
      - description: Amount
        in: query
        name: amount
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Payment
      tags:
      - users
  /users/authorize/payment/user_wallet/transactions:
    get:
      consumes:
      - application/json
      description: Get Transactions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.UserViewPayment'
      summary: Get Transactions
      tags:
      - users
  /users/authorize/payment/user_wallet/verify:
    get:
      consumes:
      - application/json
      description: Payment Verify
      parameters:
      - description: Track ID
        in: query
        name: track_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Payment Verify
      tags:
      - users
swagger: "2.0"
