basePath: /api/v1
definitions:
  DTO.AddressDTO:
    properties:
      address_detail:
        maxLength: 1000
        minLength: 5
        type: string
      city:
        maxLength: 255
        minLength: 5
        type: string
      latitude:
        type: number
      longitude:
        type: number
      province:
        maxLength: 255
        minLength: 5
        type: string
    required:
    - city
    - latitude
    - longitude
    - province
    type: object
  DTO.PosterDTO:
    properties:
      alert:
        type: boolean
      award:
        type: number
      chat:
        type: boolean
      description:
        maxLength: 1000
        minLength: 5
        type: string
      status:
        enum:
        - lost
        - found
        type: string
      tel_id:
        maxLength: 255
        minLength: 5
        type: string
      title:
        maxLength: 255
        minLength: 5
        type: string
      user_id:
        minimum: 1
        type: integer
      user_phone:
        maxLength: 13
        minLength: 11
        type: string
    required:
    - alert
    - chat
    - status
    - title
    - user_id
    type: object
  Model.Address:
    properties:
      address_detail:
        type: string
      address_id:
        type: integer
      city:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      province:
        type: string
      updatedAt:
        type: string
    type: object
  Model.Category:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      posters:
        items:
          $ref: '#/definitions/Model.Poster'
        type: array
      updatedAt:
        type: string
    type: object
  Model.ChatRoom:
    properties:
      conversations:
        items:
          $ref: '#/definitions/Model.Conversation'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      owner:
        type: integer
      poster_id:
        type: integer
      updatedAt:
        type: string
    type: object
  Model.Conversation:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      member_id:
        type: integer
      messages:
        items:
          $ref: '#/definitions/Model.Message'
        type: array
      room_id:
        type: integer
      updatedAt:
        type: string
    type: object
  Model.Image:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      image_id:
        type: integer
      updatedAt:
        type: string
      url:
        type: string
    type: object
  Model.MarkedPoster:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      poster:
        $ref: '#/definitions/Model.Poster'
      poster_id:
        type: integer
      updatedAt:
        type: string
      user_id:
        type: integer
    type: object
  Model.Message:
    properties:
      content:
        type: string
      conversation_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      receiver_id:
        type: integer
      sender_id:
        type: integer
      updatedAt:
        type: string
    type: object
  Model.Poster:
    properties:
      address:
        items:
          $ref: '#/definitions/Model.Address'
        type: array
      award:
        type: number
      categories:
        items:
          $ref: '#/definitions/Model.Category'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description;:
        type: string
      has_alert:
        type: boolean
      has_chat:
        type: boolean
      id:
        type: integer
      image:
        items:
          $ref: '#/definitions/Model.Image'
        type: array
      status:
        $ref: '#/definitions/Model.PosterStatus'
      telegram_id:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/Model.User'
      user_id:
        type: integer
      user_phone:
        type: string
    type: object
  Model.PosterStatus:
    enum:
    - lost
    - found
    type: string
    x-enum-varnames:
    - Lost
    - Found
  Model.User:
    properties:
      chat_rooms:
        items:
          $ref: '#/definitions/Model.ChatRoom'
        type: array
      conversations:
        items:
          $ref: '#/definitions/Model.Conversation'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      marked_posters:
        items:
          $ref: '#/definitions/Model.MarkedPoster'
        type: array
      posters:
        items:
          $ref: '#/definitions/Model.Poster'
        type: array
      updatedAt:
        type: string
      username:
        type: string
    type: object
  UseCase.CreatePosterRequest:
    properties:
      addresses:
        items:
          $ref: '#/definitions/DTO.AddressDTO'
        type: array
      categories:
        items:
          type: integer
        type: array
      img_urls:
        items:
          type: string
        type: array
      poster:
        $ref: '#/definitions/DTO.PosterDTO'
    required:
    - categories
    - img_urls
    type: object
  UseCase.SendOTPRequest:
    properties:
      username:
        maxLength: 30
        minLength: 11
        type: string
    required:
    - username
    type: object
  UseCase.UpdatePosterRequest:
    properties:
      addresses:
        items:
          $ref: '#/definitions/DTO.AddressDTO'
        type: array
      categories:
        items:
          type: integer
        type: array
      img_urls:
        items:
          type: string
        type: array
      poster:
        $ref: '#/definitions/DTO.PosterDTO'
    required:
    - categories
    - img_urls
    type: object
  UseCase.VerifyOTPRequest:
    properties:
      otp:
        type: string
      username:
        maxLength: 30
        minLength: 11
        type: string
    required:
    - otp
    - username
    type: object
  View.MessageView:
    properties:
      message:
        type: string
    type: object
  View.PosterView:
    properties:
      address:
        items:
          $ref: '#/definitions/Model.Address'
        type: array
      categories:
        items:
          $ref: '#/definitions/Model.Category'
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/Model.Image'
        type: array
      status:
        $ref: '#/definitions/Model.PosterStatus'
      title:
        type: string
      updated_at:
        type: string
      user:
        type: integer
    type: object
  View.UserView:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  title: Swagger Documentation for Golang web API(Gin framework)
  version: "1.0"
paths:
  /posters:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all posters, sorted and paginated according
        to the given parameters
      parameters:
      - default: 1
        description: Page ID
        in: query
        minimum: 1
        name: page_id
        required: true
        type: integer
      - default: 10
        description: Page size
        in: query
        minimum: 1
        name: page_size
        required: true
        type: integer
      - default: asc
        description: Sort direction
        in: query
        name: sort
        type: string
      - default: created_at
        description: Sort by
        in: query
        name: sort_by
        type: string
      - description: Search phrase
        in: query
        name: search_phrase
        type: string
      - default: both
        description: Status
        in: query
        name: status
        type: string
      - description: Time start
        in: query
        name: time_start
        type: integer
      - description: Time end
        in: query
        name: time_end
        type: integer
      - description: Only rewards
        in: query
        name: only_rewards
        type: boolean
      - description: Latitude
        in: query
        name: lat
        type: number
      - description: Longitude
        in: query
        name: lon
        type: number
      - collectionFormat: multi
        description: TagIds
        in: query
        items:
          type: integer
        name: tag_ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/View.PosterView'
            type: array
      summary: Get a list of all posters
      tags:
      - posters
    post:
      consumes:
      - application/json
      description: Creates a poster
      parameters:
      - description: Poster
        in: body
        name: poster
        required: true
        schema:
          $ref: '#/definitions/UseCase.CreatePosterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.PosterView'
      summary: Create a poster
      tags:
      - posters
  /posters/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a poster by ID
      parameters:
      - description: Poster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a poster by ID
      tags:
      - posters
    get:
      consumes:
      - application/json
      description: Retrieves a poster by ID
      parameters:
      - description: Poster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.PosterView'
      summary: Get a poster by ID
      tags:
      - posters
    patch:
      consumes:
      - application/json
      description: Updates a poster by ID
      parameters:
      - description: Poster ID
        in: path
        name: id
        required: true
        type: integer
      - description: Poster
        in: body
        name: poster
        required: true
        schema:
          $ref: '#/definitions/UseCase.UpdatePosterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.PosterView'
      summary: Update a poster by ID
      tags:
      - posters
  /users/auth/google/callback:
    get:
      consumes:
      - application/json
      description: google callback
      produces:
      - application/json
      responses: {}
      summary: google callback
      tags:
      - users
  /users/auth/google/login:
    get:
      consumes:
      - application/json
      description: login user with oauth2
      produces:
      - application/json
      responses: {}
      summary: login user with oauth2
      tags:
      - users
  /users/auth/otp/login:
    post:
      consumes:
      - application/json
      description: login user
      parameters:
      - description: Verify OTP
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UseCase.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.UserView'
      summary: login user
      tags:
      - users
  /users/auth/otp/send:
    post:
      consumes:
      - application/json
      description: send otp to user
      parameters:
      - description: Send OTP
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UseCase.SendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/View.MessageView'
      summary: send otp to user
      tags:
      - users
swagger: "2.0"
